import { Collector } from "./lib/collector";

declare module "hardhat/types/config" {
  interface HardhatUserConfig {
    gasReporter?: Partial<GasReporterOptions>;
  }
}

export interface GasReporterOptions {
  currency?: string;
  token?: string;
  ethPrice?: number;
  gasPrice?: number;
  gasPriceApi?: string;
  coinmarketcap?: string;
  outputFile?: string;
  noColors?: boolean;
  onlyCalledMethods?: boolean;
  rst?: boolean;
  rstTitle?: string;
  showTimeSpent?: boolean;
  excludeContracts?: string[];
  src?: string;
  proxyResolver?: any;
  showMethodSig?: boolean;
  maxMethodDiff?: number;
  maxDeploymentDiff?: number;
  enabled?: boolean;
  remoteContracts?: RemoteContract[];

  // Hardhat internals
  solcInfo?: any;
  blockLimit?: number;
}

export interface GasReporterExecutionContext {
  collector?: Collector,
  task?: string,
  blockGasLimit?: number;
  methodsTotalGas?: number,
  methodsTotalCost?: string,
  deploymentsTotalGas?: number,
  deploymentsTotalCost?: string
}

export interface RemoteContract {
  abi: any;
  address: string;
  name: string;
  bytecode?: string;
  bytecodeHash?: string;
  deployedBytecode?: string;
}

export interface Deployment {
  name: string;
  bytecode: string;
  deployedBytecode: string;
  gasData: number[];
}

/**
 * Type for the object generated by eth-gas-reporter on gasReporterOutput.json files.
 * More info: https://github.com/cgewecke/eth-gas-reporter/blob/master/docs/gasReporterOutput.md
 */
export interface GasReporterOutput {
  namespace: string;

  config: {
    currency: string;
    gasPrice: number;
    outputFile?: string;
    rst: boolean;
    rstTitle?: string;
    showTimeSpent: boolean;
    artifactType: string;
    srcPath: string;
    blockLimit: number;
    ethPrice: string;
    excludeContracts: string[];
    onlyCalledMethods: boolean;
    url: string;

    metadata: {
      compiler: {
        version: string;
      };

      settings: {
        evmVersion: string;
        optimizer: {
          enabled: boolean;
          runs: number;
        };
      };
    };
  };

  info?: {
    blockLimit: number;

    methods: {
      [methodName: string]: {
        key: string;
        contract: string;
        method: string;
        gasData: number[];
        numberOfCalls: number;
      };
    };

    deployments: Deployment[];
  };
}

export interface MethodDataItem {
  key: string,
  contract: string,
  method: string,
  fnSig: string,
  gasData: number[],
  numberOfCalls: number,
  min?: number,
  max?: number,
  average?: number,
  cost?: string,
}

export interface MethodData {[key: string]: MethodDataItem }

export interface Deployment {
  name: string,
  bytecode: string,
  deployedBytecode: string,
  gasData: number[],
  min?: number,
  max?: number,
  average?: number,
  cost?: string,
  percent?: number
}

export interface SolcInfo {
  version: string,
  optimizer: string,
  runs: number | string
}

export interface ArtifactInfo {
  abi: any[],
  bytecode: string,
  deployedBytecode: string,
  address? : string,
  bytecodeHash?: string,
}

export interface ContractInfo {
  name: string,
  artifact: ArtifactInfo
}

// Partial: borrowed from ethereumjs/tx to avoid adding package
export interface JsonRpcTx {
  input: string     // the data send along with the transaction.
  to: string | null // address of the receiver. null when it's a contract creation tx.
}

// Partial: borrowed from ethereumjs/block to avoid adding package
export interface JsonRpcBlock {
  gasLimit: string     // the data send along with the transaction.
}


