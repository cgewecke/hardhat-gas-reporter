import { Collector } from "./lib/collector";
import { GasData } from "./lib/gasData";

declare module "hardhat/types/config" {
  interface HardhatUserConfig {
    gasReporter?: GasReporterOptions;
  }
}

export interface GasReporterOptions {
  /**@property API key to access token/currency market price data with */
  coinmarketcap?: string;

  /**@property Coinmarketcap currency code to denominate network token costs in (eg: "USD") */
  currency?: string;

  /**@property Enable plugin */
  enabled?: boolean;

  /**@property List of contract names to exclude from report (e.g "Ownable") */
  excludeContracts?: string[];

  /**@property Gwei price per gas unit (eg: 20) */
  gasPrice?: number;

  /**@property Etherscan-like url to fetch live network gas price from */
  gasPriceApi?: string;

  /**@property Omit terminal color in output */
  noColors?: boolean;

  /**@property Relative path to a file to output terminal table to (instead of stdout) */
  outputFile?: string;

  /**@property Write JSON object with all options, methods, deployment data to file */
  outputJSON?: boolean

  /**@property: Relative path to a file to output JSON data to */
  outputJSONFile?: string,

  /**@property User-defined async function to help reporter identify targets of proxied calls */
  proxyResolver?: any;

  /**@property List of forked-network deployed contracts to track execution costs for */
  remoteContracts?: RemoteContract[];

  /**@property Format table output for `rst` documentation (eg sphinx, ReadTheDocs)   */
  rst?: boolean;

  /**@property Optional title for `rst` documentation */
  rstTitle?: string;

  /**@property  Display the complete function signature of methods */
  showMethodSig?: boolean;

  /**@property Lists all methods and deployments, even if no transactions were recorded for them */
  showUncalledMethods?: boolean;

  /**@property Network token gas fees are paid in (eg:"ETH") */
  token?: string;

  /**@property Network token price per currency unit, to two decimal places (eg: "2145.00") */
  tokenPrice?: string;

  // INTERNAL: AUTOSET BY PLUGIN (ignore)
  solcInfo?: any;
  blockLimit?: number;
}

export interface GasReporterExecutionContext {
  collector?: Collector,
  task?: string,
  usingViem?: boolean,
  blockGasLimit?: number;
  methodsTotalGas?: number,
  methodsTotalCost?: string,
  deploymentsTotalGas?: number,
  deploymentsTotalCost?: string
}

export interface RemoteContract {
  abi: any;
  address: string;
  name: string;
  bytecode?: string;
  bytecodeHash?: string;
  deployedBytecode?: string;
}

export interface Deployment {
  name: string;
  bytecode: string;
  deployedBytecode: string;
  gasData: number[];
}

/**
 * Type for the object generated by eth-gas-reporter on gasReporterOutput.json files.
 * More info: https://github.com/cgewecke/eth-gas-reporter/blob/master/docs/gasReporterOutput.md
 */
export interface GasReporterOutput {
  namespace: string;
  options: GasReporterOptions,
  data?: GasData
}

export interface MethodDataItem {
  key: string,
  contract: string,
  method: string,
  fnSig: string,
  gasData: number[],
  numberOfCalls: number,
  min?: number,
  max?: number,
  average?: number,
  cost?: string,
}

export interface MethodData {[key: string]: MethodDataItem }

export interface Deployment {
  name: string,
  bytecode: string,
  deployedBytecode: string,
  gasData: number[],
  min?: number,
  max?: number,
  average?: number,
  cost?: string,
  percent?: number
}

export interface SolcInfo {
  version: string,
  optimizer: string,
  runs: number | string
}

export interface ArtifactInfo {
  abi: any[],
  bytecode: string,
  deployedBytecode: string,
  address? : string,
  bytecodeHash?: string,
}

export interface ContractInfo {
  name: string,
  artifact: ArtifactInfo
}

// Partial: borrowed from ethereumjs/tx to avoid adding package
export interface JsonRpcTx {
  input: string     // the data send along with the transaction.
  to: string | null // address of the receiver. null when it's a contract creation tx.
}

// Partial: borrowed from ethereumjs/block to avoid adding package
export interface JsonRpcBlock {
  gasLimit: string     // the data send along with the transaction.
}


